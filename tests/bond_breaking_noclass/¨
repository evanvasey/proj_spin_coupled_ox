import numpy as np






# energy of H atom in sto-3G with pyscf intor methods
H_energy = -0.46658185






# FULL MOLECULAR HAMILTONIAN
def full_H(kets,coeffs,h_matrix,g_matrix,bras=None,bras_coeffs=None):
    n_dim = len(kets[0]) -1
    n_half = n_dim//2

    # in these RDMs the integral over spin coordinate is already taken into account, the double creation/annihilation operators too
    # get one and two spatial RDMs
    one_rdm = get_one_rdm_mc_fast(kets,coeffs,bras,bras_coeffs)
    one_rdm = get_spatial_one_rdm_fast(one_rdm)
    
    two_rdm = get_two_rdm_mc_fast(kets,coeffs,bras,bras_coeffs)
    two_rdm = get_spatial_two_rdm_fast(two_rdm)

    E = 0
    E1 = 0
    E2 = 0
    for i in range(n_half):
        for j in range(n_half):
            # contribution from one electron operator
            E1 += one_rdm[i,j]*h_matrix[i,j]
            for k in range(n_half):
                for l in range(n_half):
                    # contribution from two electron operator
                    E2 += 0.5*two_rdm[i,j,k,l]*g_matrix[i,j,k,l]
    E = E1 + E2
    return E






# function to get a Hamiltonian matrix in terms of a list of states when given these states in the form of a list of dets and a list of coeffs.
def get_H_CSF_matrix(list_CSF_dets,list_CSF_coeffs,h_matrix,g_matrix,energy_nuc):
    matrix_dim = len(list_CSF_dets)
    H_matrix = np.zeros((matrix_dim,matrix_dim))
    for i,(list_dets,list_coeffs) in enumerate(zip(list_CSF_dets,list_CSF_coeffs)):
        list_dets,list_coeffs = normalise_coeffs_det(list_dets,list_coeffs) 
        H_matrix[i,i] = full_H(list_dets,list_coeffs,h_matrix,g_matrix) + energy_nuc 
    for i,(list_dets_i,list_coeffs_i) in enumerate(zip(list_CSF_dets,list_CSF_coeffs)):
        for j,(list_dets_j,list_coeffs_j) in enumerate(zip(list_CSF_dets,list_CSF_coeffs)):
            if i==j:
                continue
            elif i < j:
                
                list_dets_i,list_coeffs_i = normalise_coeffs_det(list_dets_i,list_coeffs_i)
                list_dets_j,list_coeffs_j = normalise_coeffs_det(list_dets_j,list_coeffs_j)

                H_matrix[i,j] = full_H(list_dets_i,list_coeffs_i,h_matrix,g_matrix,list_dets_j,list_coeffs_j) + overlap_CSF(list_dets_i,list_coeffs_i,list_dets_j,list_coeffs_j)*energy_nuc

    for i,(list_dets_i,list_coeffs_i) in enumerate(zip(list_CSF_dets,list_CSF_coeffs)):
        for j,(list_dets_j,list_coeffs_j) in enumerate(zip(list_CSF_dets,list_CSF_coeffs)):
            if i==j:
                continue
            elif i > j:
                # matrix is symmetric since H is hermitian and we use real wavefunctions
                H_matrix[i,j] = H_matrix[j,i] 
    return H_matrix


# get the determinants in lowdin basis from dets in RHF basis, if there are multiple RHF determinants we cumulate them into one state
def get_RHF_state(RHF_states,hf_coeffs,lowdin_coeffs,overlap):
    RHF_dets_list = []
    RHF_coeffs_list = []
    for det in RHF_states:
        RHF_dets, RHF_coeffs = mo_basis_change(det,hf_coeffs,lowdin_coeffs,overlap)
                                                                                                                      
        RHF_dets, RHF_coeffs = normalise_coeffs_det(RHF_dets,RHF_coeffs,threshold=1e-10)
        RHF_dets_list += RHF_dets
        RHF_coeffs_list += RHF_coeffs
    RHF_dets_list,RHF_coeffs_list = normalise_coeffs_det(RHF_dets_list,RHF_coeffs_list,threshold=1e-10)
    return [RHF_dets_list],[RHF_coeffs_list]

# get the determinants in lowdin basis from dets in RHF basis
def get_RHF_states(RHF_states,hf_coeffs,lowdin_coeffs,overlap):
    RHF_dets_list = []
    RHF_coeffs_list = []
    for det in RHF_states:
        RHF_dets, RHF_coeffs = mo_basis_change(det,hf_coeffs,lowdin_coeffs,overlap)
                                                                                                                      
        RHF_dets, RHF_coeffs = normalise_coeffs_det(RHF_dets,RHF_coeffs,threshold=1e-10)
        RHF_dets_list.append(RHF_dets)
        RHF_coeffs_list.append(RHF_coeffs)
    return RHF_dets_list,RHF_coeffs_list


# MAYBE ADD OPTION TO PUT HF COEFF AS INPUT UNORM, ADD NUMBER OF SLOC AS INPUT VAR AND FUNCTION TO GET THE SLOC DETS/COEFFS
# main function that takes as inputs CSF states and RHF states, then outputs individual energies, L.C. energies for a range of bond distance
def get_Ecurve_CSF_RHF(r_array,RHF_states,list_CSF_dets,list_CSF_coeffs,molecule_func,HF_coeffs=None,number_sloc_states=None,sloc_grouped=False,get_sloc_func=get_sloc_empty,RHF_states_grouped=False,bond_length=None,savetxt=None):
    n_CSF = len(list_CSF_dets)
    n_RHF = len(RHF_states)
    n_sloc = 0
    RHF_change_basis_func = get_RHF_states
    if RHF_states_grouped:
        n_RHF = 1
        RHF_change_basis_func = get_RHF_state
    if number_sloc_states != None:
        n_sloc = number_sloc_states

    RHF_energy_list = []


    # alows to run a first RHF for a specific bond length that will then be used as an initial guess for the first bond length
    if bond_length != None:
        r_array=np.insert(r_array,0,bond_length)

    n_r = r_array.shape[0]

    first = 1

    return_values_matrix = np.zeros((n_r,n_CSF+2+n_RHF+n_sloc))

    return_coeffs_matrix = np.zeros((n_r,n_CSF + n_RHF + 1+n_sloc))

    for i,r in enumerate(r_array):
        print(f"r = {r}")
        mol = molecule_func(r)
        overlap = mol.intor('int1e_ovlp')
        eri = mol.intor('int2e')
        kin = mol.intor('int1e_kin')
        vnuc = mol.intor('int1e_nuc')
        h = vnuc + kin
        g = eri
        lowdin_coeffs = get_symmetric_mo_coeffs(overlap)
        h_lowdin = change_h_basis(h,lowdin_coeffs)
        g_lowdin = change_g_basis(g,lowdin_coeffs)
        hf = scf.RHF(mol)
        if first ==1:
            first = 0
        else:
            hf.mo_coeff = initial_guess_hf
        RHF_energy = hf.kernel()
        RHF_energy_list.append(RHF_energy)
        initial_guess_hf = hf.mo_coeff
        hf_coeffs = initial_guess_hf
